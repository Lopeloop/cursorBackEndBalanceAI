const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function testSupabaseConnection() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå SUPABASE_URL –∏–ª–∏ SUPABASE_ANON_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ');
    return;
  }

  const supabase = createClient(supabaseUrl, supabaseKey);

  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    } else {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìä –¢–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
  }
}

testSupabaseConnection(); 