const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function testSupabaseConnection() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_ANON_KEY;

  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase...');
  console.log('SUPABASE_URL:', supabaseUrl);
  console.log('SUPABASE_ANON_KEY:', supabaseKey ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

  if (!supabaseUrl || !supabaseKey || supabaseKey.includes('your_')) {
    console.log('‚ùå –ö–ª—é—á–∏ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç placeholder –∑–Ω–∞—á–µ–Ω–∏—è');
    console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:');
    console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí API –≤ Supabase');
    console.log('2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ anon public –∫–ª—é—á');
    console.log('3. –û–±–Ω–æ–≤–∏—Ç–µ SUPABASE_ANON_KEY –≤ .env —Ñ–∞–π–ª–µ');
    console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞');
    return;
  }

  const supabase = createClient(supabaseUrl, supabaseKey);

  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
      console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('- SQL —Å–∫—Ä–∏–ø—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ Supabase');
      console.log('- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ API');
      console.log('- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
    } else {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìä –¢–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
  }
}

testSupabaseConnection(); 